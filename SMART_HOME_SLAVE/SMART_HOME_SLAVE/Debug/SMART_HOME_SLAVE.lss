
SMART_HOME_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000002c0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e01  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ef  00000000  00000000  00001279  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000433  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ff  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000046d  00000000  00000000  0000265b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002ac8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 44 01 	call	0x288	; 0x288 <main>
  7a:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_WriteChannel>:

#include "DIO.h"

void DIO_WriteChannel(DIO_Channels ChannelId,STD_LevelTypes level){
	DIO_PORTS Portx = ChannelId/8;
	DIO_Channels ChannelPos = ChannelId%8;
  82:	98 2f       	mov	r25, r24
  84:	97 70       	andi	r25, 0x07	; 7
	
	switch(Portx){
  86:	86 95       	lsr	r24
  88:	86 95       	lsr	r24
  8a:	86 95       	lsr	r24
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <DIO_WriteChannel+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <DIO_WriteChannel+0x1c>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <DIO_WriteChannel+0x90>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <DIO_WriteChannel+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <DIO_WriteChannel+0xca>
  9c:	08 95       	ret
		case DIO_PORTA:
			if(level == STD_HIGH)
  9e:	61 30       	cpi	r22, 0x01	; 1
  a0:	69 f4       	brne	.+26     	; 0xbc <DIO_WriteChannel+0x3a>
				Set_Bit(PORTA_Reg,ChannelPos);
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_WriteChannel+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	9a 95       	dec	r25
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_WriteChannel+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	84 2b       	or	r24, r20
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret
			else
				Clear_Bit(PORTA_Reg,ChannelPos);
  bc:	4b b3       	in	r20, 0x1b	; 27
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_WriteChannel+0x48>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	9a 95       	dec	r25
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_WriteChannel+0x44>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
		break;
		case DIO_PORTB:
			if(level == STD_HIGH)
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <DIO_WriteChannel+0x74>
				Set_Bit(PORTB_Reg,ChannelPos);
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_WriteChannel+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_WriteChannel+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
			else
				Clear_Bit(PORTB_Reg,ChannelPos);
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_WriteChannel+0x82>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	9a 95       	dec	r25
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_WriteChannel+0x7e>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
		break;
		case DIO_PORTC:
			if(level == STD_HIGH)
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	69 f4       	brne	.+26     	; 0x130 <DIO_WriteChannel+0xae>
				Set_Bit(PORTC_Reg,ChannelPos);
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_WriteChannel+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	9a 95       	dec	r25
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_WriteChannel+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	84 2b       	or	r24, r20
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	08 95       	ret
			else
				Clear_Bit(PORTC_Reg,ChannelPos);
 130:	45 b3       	in	r20, 0x15	; 21
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_WriteChannel+0xbc>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	9a 95       	dec	r25
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_WriteChannel+0xb8>
 142:	cb 01       	movw	r24, r22
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
		break;
		case DIO_PORTD:
			if(level == STD_HIGH)
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	69 f4       	brne	.+26     	; 0x16a <DIO_WriteChannel+0xe8>
				Set_Bit(PORTD_Reg,ChannelPos);
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_WriteChannel+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	9a 95       	dec	r25
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_WriteChannel+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret
			else
				Clear_Bit(PORTD_Reg,ChannelPos);
 16a:	42 b3       	in	r20, 0x12	; 18
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_WriteChannel+0xf6>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	9a 95       	dec	r25
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_WriteChannel+0xf2>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <DIO_Init>:
	{Output,STD_LOW},
	{Output,STD_LOW},
	{Output,STD_LOW}
};

void DIO_Init(){
 186:	e0 e6       	ldi	r30, 0x60	; 96
 188:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_PORTS Portx;
	DIO_Channels ChannelPos;
	uint8 count = 0; 
	for(count = DIO_ChannelA0;count<PINCOUNT;count++){
 18a:	80 e0       	ldi	r24, 0x00	; 0
			case DIO_PORTB:
				if(PinConfig[count].PinDirection == Output){
					Set_Bit(DDRB_Reg,ChannelPos);
				}
				else{
					Clear_Bit(DDRB_Reg,ChannelPos);
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	50 e0       	ldi	r21, 0x00	; 0
	DIO_PORTS Portx;
	DIO_Channels ChannelPos;
	uint8 count = 0; 
	for(count = DIO_ChannelA0;count<PINCOUNT;count++){
		Portx = count/8;
		ChannelPos = count%8;
 190:	28 2f       	mov	r18, r24
 192:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 194:	98 2f       	mov	r25, r24
 196:	96 95       	lsr	r25
 198:	96 95       	lsr	r25
 19a:	96 95       	lsr	r25
 19c:	91 30       	cpi	r25, 0x01	; 1
 19e:	09 f1       	breq	.+66     	; 0x1e2 <DIO_Init+0x5c>
 1a0:	30 f0       	brcs	.+12     	; 0x1ae <DIO_Init+0x28>
 1a2:	92 30       	cpi	r25, 0x02	; 2
 1a4:	c1 f1       	breq	.+112    	; 0x216 <DIO_Init+0x90>
 1a6:	93 30       	cpi	r25, 0x03	; 3
 1a8:	09 f4       	brne	.+2      	; 0x1ac <DIO_Init+0x26>
 1aa:	4f c0       	rjmp	.+158    	; 0x24a <DIO_Init+0xc4>
 1ac:	67 c0       	rjmp	.+206    	; 0x27c <DIO_Init+0xf6>
			case DIO_PORTA:
				if(PinConfig[count].PinDirection == Output){
 1ae:	90 81       	ld	r25, Z
 1b0:	91 30       	cpi	r25, 0x01	; 1
 1b2:	59 f4       	brne	.+22     	; 0x1ca <DIO_Init+0x44>
					Set_Bit(DDRA_Reg,ChannelPos);
 1b4:	9a b3       	in	r25, 0x1a	; 26
 1b6:	ba 01       	movw	r22, r20
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_Init+0x38>
 1ba:	66 0f       	add	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	2a 95       	dec	r18
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_Init+0x34>
 1c2:	9b 01       	movw	r18, r22
 1c4:	29 2b       	or	r18, r25
 1c6:	2a bb       	out	0x1a, r18	; 26
 1c8:	59 c0       	rjmp	.+178    	; 0x27c <DIO_Init+0xf6>
				}
				else{
					Clear_Bit(DDRA_Reg,ChannelPos);
 1ca:	3a b3       	in	r19, 0x1a	; 26
 1cc:	ba 01       	movw	r22, r20
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_Init+0x4e>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	2a 95       	dec	r18
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_Init+0x4a>
 1d8:	96 2f       	mov	r25, r22
 1da:	90 95       	com	r25
 1dc:	93 23       	and	r25, r19
 1de:	9a bb       	out	0x1a, r25	; 26
 1e0:	4d c0       	rjmp	.+154    	; 0x27c <DIO_Init+0xf6>
				}
			break;
			case DIO_PORTB:
				if(PinConfig[count].PinDirection == Output){
 1e2:	90 81       	ld	r25, Z
 1e4:	91 30       	cpi	r25, 0x01	; 1
 1e6:	59 f4       	brne	.+22     	; 0x1fe <DIO_Init+0x78>
					Set_Bit(DDRB_Reg,ChannelPos);
 1e8:	97 b3       	in	r25, 0x17	; 23
 1ea:	ba 01       	movw	r22, r20
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_Init+0x6c>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	2a 95       	dec	r18
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_Init+0x68>
 1f6:	9b 01       	movw	r18, r22
 1f8:	29 2b       	or	r18, r25
 1fa:	27 bb       	out	0x17, r18	; 23
 1fc:	3f c0       	rjmp	.+126    	; 0x27c <DIO_Init+0xf6>
				}
				else{
					Clear_Bit(DDRB_Reg,ChannelPos);
 1fe:	37 b3       	in	r19, 0x17	; 23
 200:	ba 01       	movw	r22, r20
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_Init+0x82>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	2a 95       	dec	r18
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_Init+0x7e>
 20c:	96 2f       	mov	r25, r22
 20e:	90 95       	com	r25
 210:	93 23       	and	r25, r19
 212:	97 bb       	out	0x17, r25	; 23
 214:	33 c0       	rjmp	.+102    	; 0x27c <DIO_Init+0xf6>
				}
			break;
			case DIO_PORTC:
				if(PinConfig[count].PinDirection == Output){
 216:	90 81       	ld	r25, Z
 218:	91 30       	cpi	r25, 0x01	; 1
 21a:	59 f4       	brne	.+22     	; 0x232 <DIO_Init+0xac>
					Set_Bit(DDRC_Reg,ChannelPos);
 21c:	94 b3       	in	r25, 0x14	; 20
 21e:	ba 01       	movw	r22, r20
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_Init+0xa0>
 222:	66 0f       	add	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	2a 95       	dec	r18
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_Init+0x9c>
 22a:	9b 01       	movw	r18, r22
 22c:	29 2b       	or	r18, r25
 22e:	24 bb       	out	0x14, r18	; 20
 230:	25 c0       	rjmp	.+74     	; 0x27c <DIO_Init+0xf6>
				}
				else{
					Clear_Bit(DDRC_Reg,ChannelPos);
 232:	34 b3       	in	r19, 0x14	; 20
 234:	ba 01       	movw	r22, r20
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_Init+0xb6>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	2a 95       	dec	r18
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_Init+0xb2>
 240:	96 2f       	mov	r25, r22
 242:	90 95       	com	r25
 244:	93 23       	and	r25, r19
 246:	94 bb       	out	0x14, r25	; 20
 248:	19 c0       	rjmp	.+50     	; 0x27c <DIO_Init+0xf6>
				}
			break;
			case DIO_PORTD:
				if(PinConfig[count].PinDirection == Output){
 24a:	90 81       	ld	r25, Z
 24c:	91 30       	cpi	r25, 0x01	; 1
 24e:	59 f4       	brne	.+22     	; 0x266 <DIO_Init+0xe0>
					Set_Bit(DDRD_Reg,ChannelPos);
 250:	91 b3       	in	r25, 0x11	; 17
 252:	ba 01       	movw	r22, r20
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_Init+0xd4>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	2a 95       	dec	r18
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_Init+0xd0>
 25e:	9b 01       	movw	r18, r22
 260:	29 2b       	or	r18, r25
 262:	21 bb       	out	0x11, r18	; 17
 264:	0b c0       	rjmp	.+22     	; 0x27c <DIO_Init+0xf6>
				}
				else{
					Clear_Bit(DDRD_Reg,ChannelPos);
 266:	31 b3       	in	r19, 0x11	; 17
 268:	ba 01       	movw	r22, r20
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_Init+0xea>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	2a 95       	dec	r18
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_Init+0xe6>
 274:	96 2f       	mov	r25, r22
 276:	90 95       	com	r25
 278:	93 23       	and	r25, r19
 27a:	91 bb       	out	0x11, r25	; 17

void DIO_Init(){
	DIO_PORTS Portx;
	DIO_Channels ChannelPos;
	uint8 count = 0; 
	for(count = DIO_ChannelA0;count<PINCOUNT;count++){
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	32 96       	adiw	r30, 0x02	; 2
 280:	80 32       	cpi	r24, 0x20	; 32
 282:	09 f0       	breq	.+2      	; 0x286 <DIO_Init+0x100>
 284:	85 cf       	rjmp	.-246    	; 0x190 <DIO_Init+0xa>
				}
			break;
		}
		
	}
 286:	08 95       	ret

00000288 <main>:
#include "SPI.h"
#define F_CPU 16000000UL
#include "DIO_CFG.h"
int main(void)
{
	SPI_INIT();
 288:	0e 94 55 01 	call	0x2aa	; 0x2aa <SPI_INIT>
	/* Replace with your application code */
	while (1)
	{
		if(SPI_TxRX('5') == '1'){
 28c:	85 e3       	ldi	r24, 0x35	; 53
 28e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <SPI_TxRX>
 292:	81 33       	cpi	r24, 0x31	; 49
 294:	29 f4       	brne	.+10     	; 0x2a0 <main+0x18>
			DIO_WriteChannel(DIO_ChannelB0 , STD_HIGH);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 29e:	f6 cf       	rjmp	.-20     	; 0x28c <main+0x4>
		}else{
			DIO_WriteChannel(DIO_ChannelB0 , STD_LOW);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	88 e0       	ldi	r24, 0x08	; 8
 2a4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 2a8:	f1 cf       	rjmp	.-30     	; 0x28c <main+0x4>

000002aa <SPI_INIT>:




void SPI_INIT(){
	DIO_Init();
 2aa:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_Init>
	SPI_CFG->SPCR_PART.SPCR_REG.SPE_BIT = STD_HIGH;
 2ae:	6e 9a       	sbi	0x0d, 6	; 13
 2b0:	08 95       	ret

000002b2 <SPI_TxRX>:
}
uint8 SPI_TxRX(uint8 data){ // Transfer Data
	SPI_CFG->SPDR_REG = data;
 2b2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPI_CFG->SPSR_PART.SPSR_REG.SPIF_BIT));
 2b4:	77 9b       	sbis	0x0e, 7	; 14
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <SPI_TxRX+0x2>
	return SPI_CFG->SPDR_REG;
 2b8:	8f b1       	in	r24, 0x0f	; 15
 2ba:	08 95       	ret

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
