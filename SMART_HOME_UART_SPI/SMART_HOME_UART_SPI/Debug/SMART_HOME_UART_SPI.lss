
SMART_HOME_UART_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a0  008000a0  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd0  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007dd  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000445  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072d  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000201  00000000  00000000  000024cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000026ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3a       	cpi	r26, 0xA1	; 161
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  8a:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Init>:
	{Output,STD_LOW},
	{Output,STD_LOW},
	{Output,STD_LOW}
};

void DIO_Init(){
  92:	e0 e6       	ldi	r30, 0x60	; 96
  94:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_PORTS Portx;
	DIO_Channels ChannelPos;
	uint8 count = 0; 
	for(count = DIO_ChannelA0;count<PINCOUNT;count++){
  96:	80 e0       	ldi	r24, 0x00	; 0
			case DIO_PORTB:
				if(PinConfig[count].PinDirection == Output){
					Set_Bit(DDRB_Reg,ChannelPos);
				}
				else{
					Clear_Bit(DDRB_Reg,ChannelPos);
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	50 e0       	ldi	r21, 0x00	; 0
	DIO_PORTS Portx;
	DIO_Channels ChannelPos;
	uint8 count = 0; 
	for(count = DIO_ChannelA0;count<PINCOUNT;count++){
		Portx = count/8;
		ChannelPos = count%8;
  9c:	28 2f       	mov	r18, r24
  9e:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
  a0:	98 2f       	mov	r25, r24
  a2:	96 95       	lsr	r25
  a4:	96 95       	lsr	r25
  a6:	96 95       	lsr	r25
  a8:	91 30       	cpi	r25, 0x01	; 1
  aa:	09 f1       	breq	.+66     	; 0xee <DIO_Init+0x5c>
  ac:	30 f0       	brcs	.+12     	; 0xba <DIO_Init+0x28>
  ae:	92 30       	cpi	r25, 0x02	; 2
  b0:	c1 f1       	breq	.+112    	; 0x122 <DIO_Init+0x90>
  b2:	93 30       	cpi	r25, 0x03	; 3
  b4:	09 f4       	brne	.+2      	; 0xb8 <DIO_Init+0x26>
  b6:	4f c0       	rjmp	.+158    	; 0x156 <DIO_Init+0xc4>
  b8:	67 c0       	rjmp	.+206    	; 0x188 <DIO_Init+0xf6>
			case DIO_PORTA:
				if(PinConfig[count].PinDirection == Output){
  ba:	90 81       	ld	r25, Z
  bc:	91 30       	cpi	r25, 0x01	; 1
  be:	59 f4       	brne	.+22     	; 0xd6 <DIO_Init+0x44>
					Set_Bit(DDRA_Reg,ChannelPos);
  c0:	9a b3       	in	r25, 0x1a	; 26
  c2:	ba 01       	movw	r22, r20
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_Init+0x38>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	2a 95       	dec	r18
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_Init+0x34>
  ce:	9b 01       	movw	r18, r22
  d0:	29 2b       	or	r18, r25
  d2:	2a bb       	out	0x1a, r18	; 26
  d4:	59 c0       	rjmp	.+178    	; 0x188 <DIO_Init+0xf6>
				}
				else{
					Clear_Bit(DDRA_Reg,ChannelPos);
  d6:	3a b3       	in	r19, 0x1a	; 26
  d8:	ba 01       	movw	r22, r20
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_Init+0x4e>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	2a 95       	dec	r18
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_Init+0x4a>
  e4:	96 2f       	mov	r25, r22
  e6:	90 95       	com	r25
  e8:	93 23       	and	r25, r19
  ea:	9a bb       	out	0x1a, r25	; 26
  ec:	4d c0       	rjmp	.+154    	; 0x188 <DIO_Init+0xf6>
				}
			break;
			case DIO_PORTB:
				if(PinConfig[count].PinDirection == Output){
  ee:	90 81       	ld	r25, Z
  f0:	91 30       	cpi	r25, 0x01	; 1
  f2:	59 f4       	brne	.+22     	; 0x10a <DIO_Init+0x78>
					Set_Bit(DDRB_Reg,ChannelPos);
  f4:	97 b3       	in	r25, 0x17	; 23
  f6:	ba 01       	movw	r22, r20
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_Init+0x6c>
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	2a 95       	dec	r18
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_Init+0x68>
 102:	9b 01       	movw	r18, r22
 104:	29 2b       	or	r18, r25
 106:	27 bb       	out	0x17, r18	; 23
 108:	3f c0       	rjmp	.+126    	; 0x188 <DIO_Init+0xf6>
				}
				else{
					Clear_Bit(DDRB_Reg,ChannelPos);
 10a:	37 b3       	in	r19, 0x17	; 23
 10c:	ba 01       	movw	r22, r20
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_Init+0x82>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	2a 95       	dec	r18
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_Init+0x7e>
 118:	96 2f       	mov	r25, r22
 11a:	90 95       	com	r25
 11c:	93 23       	and	r25, r19
 11e:	97 bb       	out	0x17, r25	; 23
 120:	33 c0       	rjmp	.+102    	; 0x188 <DIO_Init+0xf6>
				}
			break;
			case DIO_PORTC:
				if(PinConfig[count].PinDirection == Output){
 122:	90 81       	ld	r25, Z
 124:	91 30       	cpi	r25, 0x01	; 1
 126:	59 f4       	brne	.+22     	; 0x13e <DIO_Init+0xac>
					Set_Bit(DDRC_Reg,ChannelPos);
 128:	94 b3       	in	r25, 0x14	; 20
 12a:	ba 01       	movw	r22, r20
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Init+0xa0>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	2a 95       	dec	r18
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Init+0x9c>
 136:	9b 01       	movw	r18, r22
 138:	29 2b       	or	r18, r25
 13a:	24 bb       	out	0x14, r18	; 20
 13c:	25 c0       	rjmp	.+74     	; 0x188 <DIO_Init+0xf6>
				}
				else{
					Clear_Bit(DDRC_Reg,ChannelPos);
 13e:	34 b3       	in	r19, 0x14	; 20
 140:	ba 01       	movw	r22, r20
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_Init+0xb6>
 144:	66 0f       	add	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	2a 95       	dec	r18
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_Init+0xb2>
 14c:	96 2f       	mov	r25, r22
 14e:	90 95       	com	r25
 150:	93 23       	and	r25, r19
 152:	94 bb       	out	0x14, r25	; 20
 154:	19 c0       	rjmp	.+50     	; 0x188 <DIO_Init+0xf6>
				}
			break;
			case DIO_PORTD:
				if(PinConfig[count].PinDirection == Output){
 156:	90 81       	ld	r25, Z
 158:	91 30       	cpi	r25, 0x01	; 1
 15a:	59 f4       	brne	.+22     	; 0x172 <DIO_Init+0xe0>
					Set_Bit(DDRD_Reg,ChannelPos);
 15c:	91 b3       	in	r25, 0x11	; 17
 15e:	ba 01       	movw	r22, r20
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_Init+0xd4>
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	2a 95       	dec	r18
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_Init+0xd0>
 16a:	9b 01       	movw	r18, r22
 16c:	29 2b       	or	r18, r25
 16e:	21 bb       	out	0x11, r18	; 17
 170:	0b c0       	rjmp	.+22     	; 0x188 <DIO_Init+0xf6>
				}
				else{
					Clear_Bit(DDRD_Reg,ChannelPos);
 172:	31 b3       	in	r19, 0x11	; 17
 174:	ba 01       	movw	r22, r20
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_Init+0xea>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	2a 95       	dec	r18
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_Init+0xe6>
 180:	96 2f       	mov	r25, r22
 182:	90 95       	com	r25
 184:	93 23       	and	r25, r19
 186:	91 bb       	out	0x11, r25	; 17

void DIO_Init(){
	DIO_PORTS Portx;
	DIO_Channels ChannelPos;
	uint8 count = 0; 
	for(count = DIO_ChannelA0;count<PINCOUNT;count++){
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	32 96       	adiw	r30, 0x02	; 2
 18c:	80 32       	cpi	r24, 0x20	; 32
 18e:	09 f0       	breq	.+2      	; 0x192 <DIO_Init+0x100>
 190:	85 cf       	rjmp	.-246    	; 0x9c <DIO_Init+0xa>
				}
			break;
		}
		
	}
 192:	08 95       	ret

00000194 <main>:
#include <avr/interrupt.h>
	uint8 data = 0;

int main(void)
{
	UART_INIT();
 194:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_INIT>
	SPI_INIT();
 198:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SPI_INIT>
	while (1)
	{
		data = UART_RECIEVE();
		if(SPI_TxRX(data) == '5'){
			Toggle_Bit(PORTA_Reg , DIO_ChannelA0);
 19c:	c1 e0       	ldi	r28, 0x01	; 1
{
	UART_INIT();
	SPI_INIT();
	while (1)
	{
		data = UART_RECIEVE();
 19e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_RECIEVE>
 1a2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
		if(SPI_TxRX(data) == '5'){
 1a6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SPI_TxRX>
 1aa:	85 33       	cpi	r24, 0x35	; 53
 1ac:	c1 f7       	brne	.-16     	; 0x19e <main+0xa>
			Toggle_Bit(PORTA_Reg , DIO_ChannelA0);
 1ae:	8b b3       	in	r24, 0x1b	; 27
 1b0:	8c 27       	eor	r24, r28
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	f4 cf       	rjmp	.-24     	; 0x19e <main+0xa>

000001b6 <SPI_INIT>:
#include "SPI.h"
void SPI_INIT(){
	DIO_Init();
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Init>
	SPI_CFG->SPCR_PART.SPCR_REG.MSTR_BIT = MASTER;
 1ba:	6c 9a       	sbi	0x0d, 4	; 13
	SPI_CFG->SPCR_PART.SPCR_REG.SPE_BIT = STD_HIGH;
 1bc:	6e 9a       	sbi	0x0d, 6	; 13
 1be:	08 95       	ret

000001c0 <SPI_TxRX>:
}
uint8 SPI_TxRX(uint8 data){ // Transfer Data
	SPI_CFG->SPDR_REG = data;	
 1c0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPI_CFG->SPSR_PART.SPSR_REG.SPIF_BIT));
 1c2:	77 9b       	sbis	0x0e, 7	; 14
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <SPI_TxRX+0x2>
	return SPI_CFG->SPDR_REG;
 1c6:	8f b1       	in	r24, 0x0f	; 15
}
 1c8:	08 95       	ret

000001ca <UART_INIT>:
	unsigned short count = 0;
	while(string[count] != '\0'){
		UART_SEND_CHAR(string[count]);
		count++;
	}
}
 1ca:	8a b1       	in	r24, 0x0a	; 10
 1cc:	88 61       	ori	r24, 0x18	; 24
 1ce:	8a b9       	out	0x0a, r24	; 10
 1d0:	80 b5       	in	r24, 0x20	; 32
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	80 bd       	out	0x20, r24	; 32
 1d6:	80 b5       	in	r24, 0x20	; 32
 1d8:	86 60       	ori	r24, 0x06	; 6
 1da:	80 bd       	out	0x20, r24	; 32
 1dc:	87 e6       	ldi	r24, 0x67	; 103
 1de:	89 b9       	out	0x09, r24	; 9
 1e0:	10 bc       	out	0x20, r1	; 32
 1e2:	08 95       	ret

000001e4 <UART_RECIEVE>:
unsigned char UART_RECIEVE(){
	while(!(UCSRA & (1<<RXC))); // when still 0 stop here when 1 continue
 1e4:	5f 9b       	sbis	0x0b, 7	; 11
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <UART_RECIEVE>
	return UDR;
 1e8:	8c b1       	in	r24, 0x0c	; 12
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
